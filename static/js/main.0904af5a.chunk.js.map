{"version":3,"sources":["assets/img/Kevin.jpg","components/Card.jsx","pages/Index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","large","width","height","styleRoot","justifyContent","styleSelf","marginRight","alignSelf","SimpleCard","classes","Card","className","CardContent","Avatar","alt","src","require","Typography","color","gutterBottom","variant","component","theme","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","CenteredGrid","Grid","container","item","xs","md","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,mC,0ICOrCC,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,KAEdC,OAAQ,CACJC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEfC,MAAO,CACHC,SAAU,IAEdC,IAAK,CACDC,aAAc,IAElBC,MAAO,CACHC,MAAO,IACPC,OAAQ,KAEZC,UAAW,CACPV,QAAS,OACTW,eAAgB,UAEpBC,UAAW,CACPC,YAAa,GACbC,UAAW,YAIJ,SAASC,IACpB,IAAMC,EAAUrB,IAEhB,OACI,kBAACsB,EAAA,EAAD,CAAMC,UAAWF,EAAQnB,MACrB,kBAACsB,EAAA,EAAD,KACI,yBAAKD,UAAWF,EAAQN,WACpB,yBAAKQ,UAAWF,EAAQJ,WACpB,kBAACQ,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAKC,EAAQ,IAA4BL,UAAWF,EAAQT,SAEzF,6BACI,kBAACiB,EAAA,EAAD,CAAYN,UAAWF,EAAQb,MAAOsB,MAAM,gBAAgBC,cAAY,GAAxE,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKC,UAAU,MAAnC,gCAGA,kBAACJ,EAAA,EAAD,CAAYN,UAAWF,EAAQX,IAAKoB,MAAM,iBAA1C,oCAGA,kBAACD,EAAA,EAAD,CAAYG,QAAQ,QAAQC,UAAU,KAAtC,gDAEA,6BACK,4BCtD7B,IAAMjC,EAAYC,aAAW,SAACiC,GAAD,MAAY,CACrChC,KAAM,CACFiC,SAAU,GAEdC,MAAO,CACHC,QAASH,EAAMI,QAAQ,GACvBC,UAAW,SACXT,MAAOI,EAAMM,QAAQC,KAAKC,eAInB,SAASC,IACpB,IAAMtB,EAAUrB,IAEhB,OACI,yBAAKuB,UAAWF,EAAQnB,MACpB,kBAAC0C,EAAA,EAAD,CAAMC,WAAS,EAACP,QAAS,GACrB,kBAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnB,kBAAC,EAAD,SCTLC,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,QCIc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0904af5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Kevin.630a1ead.jpg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    large: {\r\n        width: 100,\r\n        height: 100,\r\n    },\r\n    styleRoot: {\r\n        display: 'flex', \r\n        justifyContent: 'center'\r\n    },\r\n    styleSelf: {\r\n        marginRight: 20, \r\n        alignSelf: 'center'\r\n    }\r\n});\r\n\r\nexport default function SimpleCard() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <div className={classes.styleRoot}>\r\n                    <div className={classes.styleSelf}>\r\n                        <Avatar alt=\"Remy Sharp\" src={require(\"../assets/img/Kevin.jpg\")} className={classes.large} />\r\n                    </div>\r\n                    <div>\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                            Name Card\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            Kevin Prakarsa Barrang Randa\r\n                        </Typography>\r\n                        <Typography className={classes.pos} color=\"textSecondary\">\r\n                            Graduated from Telkom University\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            well meaning and kindly usefull to the other.\r\n                        <br />\r\n                            {'\"a benevolent smile\"'}\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '../components/Card';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    }\r\n}));\r\n\r\nexport default function CenteredGrid() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} md={12}>\r\n                    <Card />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Index from './pages/Index';\r\n//import AboutMe from './pages/AboutMe';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Index />\r\n      {/* <AboutMe/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}